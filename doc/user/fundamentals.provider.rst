.. for doctest:
    >>> import gedidb as gdb

.. _fundamentals-provider:

#############
Data Provider
#############

The :py:class:`gedidb.GEDIProvider` module in gediDB is the core interface for accessing structured GEDI data and metadata from a tileDB database. With this module, you can execute spatial and temporal queries on GEDI data, retrieving relevant variables efficiently and enabling complex geospatial operations. The :py:class:`gedidb.GEDIProvider` class streamlines the process, making it easy to access the extensive data generated by the GEDI mission for advanced analysis.

Key capabilities
----------------

- **Spatial Queries**: Query GEDI data based on specific spatial boundaries, enabling analyses within defined regions.
- **Temporal Queries**: Filter data by date range to focus on specific time periods.
- **Variable Selection**: Retrieve only the data variables needed for your analysis to optimize performance.
- **Quality Filters**: Apply additional quality filters to refine data retrieval based on specific conditions.
- **Reference Point Query**: Query GEDI data based on a reference point and get the nearest shots within a defined radius.
- **Flexible Output Formats**: Export results as either `xarray.Dataset` for multi-dimensional data or `pandas.DataFrame` for tabular data.

Default available variables
---------------------------

The database includes a wide range of variables, covering spatial coordinates, elevation data, vegetation metrics, biomass estimates, and quality flags across multiple GEDI products (L2A, L2B, L4A, L4C). Below is a table of available default variables stored in the database:

.. csv-table:: Variable Descriptions
   :header: "Variable Name", "Description", "Units", "Product"
   :widths: 20, 50, 15, 10

   "agbd", "Aboveground biomass density", "Mg/ha", "L4A"
   "agbd_pi_lower", "Lower prediction interval for aboveground biomass density", "Mg/ha", "L4A"
   "agbd_pi_upper", "Upper prediction interval for aboveground biomass density", "Mg/ha", "L4A"
   "agbd_se", "Standard error of aboveground biomass density", "Mg/ha", "L4A"
   "agbd_t", "Model prediction in fit units", "adimensional", "L4A"
   "agbd_t_se", "Model prediction standard error in fit units", "adimensional", "L4A"
   "algorithmrun_flag", "The L2B algorithm run flag", "adimensional", "L2B"
   "beam_name", "Name of the beam", "adimensional", "L2A"
   "beam_type", "Type of beam used", "adimensional", "L2A"
   "cover", "Total canopy cover", "Percent", "L2B"
   "cover_z", "Cumulative canopy cover vertical profile", "Percent", "L2B"
   "degrade_flag", "Flag indicating degraded state of pointing and/or positioning information", "adimensional", "L2A"
   "digital_elevation_model", "TanDEM-X elevation at GEDI footprint location", "Meters", "L2A"
   "digital_elevation_model_srtm", "STRM elevation at GEDI footprint location", "Meters", "L2A"
   "dz", "Vertical step size of foliage profile", "Meters", "L2B"
   "elev_highestreturn_a1", "Elevation of the highest return detected using algorithm 1, relative to reference ellipsoid", "Meters", "L2A"
   "elev_highestreturn_a2", "Elevation of the highest return detected using algorithm 2, relative to reference ellipsoid", "Meters", "L2A"
   "elev_lowestmode", "Elevation of center of lowest mode relative to reference ellipsoid", "Meters", "L2A"
   "energy_total", "Total energy detected in the waveform", "adimensional", "L2A"
   "fhd_normal", "Foliage Height Diversity", "adimensional", "L2B"
   "l2_quality_flag", "Flag identifying the most useful L2 data for biomass predictions", "adimensional", "L4A"
   "l2a_quality_flag", "L2A quality flag", "adimensional", "L2B"
   "l2b_quality_flag", "L2B quality flag", "adimensional", "L2B"
   "l4_quality_flag", "Flag simplifying selection of most useful biomass predictions", "adimensional", "L4A"
   "landsat_treecover", "Tree cover in the year 2010, defined as canopy closure for all vegetation taller than 5 m in height as a percentage per output grid cell", "Percent", "L2A"
   "landsat_water_persistence", "Percent UMD GLAD Landsat observations with classified surface water", "Percent", "L2A"
   "leaf_off_doy", "GEDI 1 km EASE 2.0 grid leaf-off start day-of-year", "adimensional", "L2A"
   "leaf_off_flag", "GEDI 1 km EASE 2.0 grid flag", "adimensional", "L2A"
   "leaf_on_cycle", "Flag that indicates the vegetation growing cycle for leaf-on observations", "adimensional", "L2A"
   "leaf_on_doy", "GEDI 1 km EASE 2.0 grid leaf-on start day-of-year", "adimensional", "L2A"
   "modis_nonvegetated", "Percent non-vegetated from MODIS MOD44B V6 data", "Percent", "L2A"
   "modis_nonvegetated_sd", "Percent non-vegetated standard deviation from MODIS MOD44B V6 data", "Percent", "L2A"
   "modis_treecover", "Percent tree cover from MODIS MOD44B V6 data", "Percent", "L2A"
   "modis_treecover_sd", "Percent tree cover standard deviation from MODIS MOD44B V6 data", "Percent", "L2A"
   "num_detectedmodes", "Number of detected modes in rxwaveform", "adimensional", "L2A"
   "omega", "Foliage Clumping Index", "adimensional", "L2B"
   "pai", "Total Plant Area Index", "m²/m²", "L2B"
   "pai_z", "Plant Area Index profile", "m²/m²", "L2B"
   "pavd_z", "Plant Area Volume Density profile", "m²/m³", "L2B"
   "pft_class", "GEDI 1 km EASE 2.0 grid Plant Functional Type (PFT)", "adimensional", "L2A"
   "pgap_theta", "Total Gap Probability (theta)", "adimensional", "L2B"
   "pgap_theta_error", "Total Pgap (theta) error", "adimensional", "L2B"
   "predict_stratum", "Prediction stratum name for the 1 km cell", "adimensional", "L4A"
   "predictor_limit_flag", "Prediction stratum identifier (0=in bounds, 1=lower bound, 2=upper bound)", "adimensional", "L4A"
   "quality_flag", "Flag simplifying selection of most useful data", "adimensional", "L2A"
   "region_class", "GEDI 1 km EASE 2.0 grid world continental regions ", "adimensional", "L2A"
   "response_limit_flag", "Prediction value outside bounds of training data (0=in bounds, 1=lower bound, 2=upper bound)", "adimensional", "L4A"
   "rg", "Integral of the ground component in the RX waveform", "adimensional", "L2B"
   "rh", "Relative height metrics at 1% interval", "Meters", "L2A"
   "rh100", "Height above ground of the received waveform signal start", "cm", "L2B"
   "rhog", "Volumetric scattering coefficient (rho) of the ground", "adimensional", "L2B"
   "rhog_error", "Rho (ground) error", "adimensional", "L2B"
   "rhov", "Volumetric scattering coefficient (rho) of the canopy", "adimensional", "L2B"
   "rhov_error", "Rho (canopy) error", "adimensional", "L2B"
   "rossg", "Ross-G function", "adimensional", "L2B"
   "rv", "Integral of the vegetation component in the RX waveform", "adimensional", "L2B"
   "rx_algrunflag", "Flag indicating signal was detected and algorithm ran successfully", "adimensional", "L2A"
   "rx_maxamp", "Maximum amplitude of rxwaveform relative to mean noise level", "adimensional", "L2A"
   "rx_range_highestreturn", "Range to signal start", "Meters", "L2B"
   "sd_corrected", "Noise standard deviation, corrected for odd/even digitizer bin errors based on pre-launch calibrations", "adimensional", "L2A"
   "selected_algorithm", "Identifier of algorithm selected as identifying the lowest non-noise mode", "adimensional", "L2A"
   "selected_l2a_algorithm", "Selected L2A algorithm setting", "adimensional", "L2B"
   "selected_rg_algorithm", "Selected R (ground) algorithm", "adimensional", "L2B"
   "sensitivity", "Maxmimum canopy cover that can be penetrated", "adimensional", "L2A"
   "sensitivity_a1", "Geolocation sensitivity factor A1", "adimensional", "L2A"
   "sensitivity_a2", "Geolocation sensitivity factor A2", "adimensional", "L2A"
   "shot_number", "Unique identifier for each shot", "adimensional", "L4C"
   "solar_azimuth", "Solar azimuth angle at the time of the shot", "Degrees", "L2A"
   "solar_elevation", "Solar elevation angle at the time of the shot", "Degrees", "L2A"
   "stale_return_flag", "Flag indicating return signal above detection threshold was not detected", "adimensional", "L2B"
   "surface_flag", "Identifier of algorithm selected as identifying the lowest non-noise mode", "adimensional", "L2A"
   "toploc", "Sample number of highest detected return", "adimensional", "L2A"
   "urban_proportion", "The percentage proportion of land area within a focal area surrounding each shot that is urban land cover.", "Percent", "L2A"
   "wsci", "Waveform Structural Complexity Index", "adimensional", "L4C"
   "wsci_pi_lower", "Waveform Structural Complexity Index lower prediction interval", "adimensional", "L4C"
   "wsci_pi_upper", "Waveform Structural Complexity Index upper prediction interval", "adimensional", "L4C"
   "wsci_quality_flag", "Waveform Structural Complexity Index quality flag", "adimensional", "L4C"
   "wsci_xy", "Horizontal Structural Complexity", "adimensional", "L4C"
   "wsci_xy_pi_lower", "Horizontal Structural Complexity lower prediction interval", "adimensional", "L4C"
   "wsci_xy_pi_upper", "Horizontal Structural Complexity upper prediction interval", "adimensional", "L4C"
   "wsci_z", "Vertical Structural Complexity", "adimensional", "L4C"
   "wsci_z_pi_lower", "Vertical Structural Complexity lower prediction interval", "adimensional", "L4C"
   "wsci_z_pi_upper", "Vertical Structural Complexity upper prediction interval", "adimensional", "L4C"
   "zcross", "Sample number of center of lowest mode above noise level", "Nanoseconds", "L2A"

Retrieving GEDI data with the GEDI provider
-------------------------------------------

The :py:class:`gedidb.GEDIProvider` class is your main tool for querying GEDI data from the tileDB database. The following example demonstrates how to configure and use the provider to retrieve data with options to include additional quality filters for customized data refinement.

Basic query example
~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    import geopandas as gpd
    import gedidb as gdb

    # Load region of interest
    region_of_interest = gpd.read_file('./data/geojson/BR-Sa1.geojson')

    # Instantiate the GEDIProvider
    provider = gdb.GEDIProvider(storage_type='local', 
                                local_path= "/path/to/your/database")

    # Define the columns to query and additional parameters
    variables = ["wsci_z_pi_lower", "wsci_z_pi_upper"]

    dataset = provider.get_data(variables = variables,
                                geometry = region_of_interest,
                                start_time = "2018-01-01",
                                end_time = "2024-12-31",
                                return_type= 'xarray')

Parameters for ``get_data()``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 - **variables**: List of variables (columns) to retrieve from the database.
 - **geometry**: (Optional) GeoPandas geometry for spatial filtering.
 - **start_time**: (Optional) Start date for temporal filtering (format: "YYYY-MM-DD").
 - **end_time**: (Optional) End date for temporal filtering (format: "YYYY-MM-DD").
 - **return_type**: Specifies the format of the returned data, either :py:class:`xarray.Dataset` ("xarray"). or :py:class:`pandas.DataFrame` ("dataframe") - The default is "xarray".
 - **query_type**: (Optional) Type of query to execute, either "nearest" or "bounding_box", in case of nearest, a point has to be provided as well (default: "bounding_box").
 - **point**: (Optional) Reference point for nearest query, required if `query_type` is "nearest" (format: Tuple[longitude, latitude]).
 - **num_shots**: (Optional) Number of shots to retrieve if the `query_type` is "nearest" (default: 10).
 - **radius**: (Optional) Radius in degrees around the point if the `query_type` is "nearest" (default: 0.1).
 - **quality_filters**: (Optional) Additional quality filters to apply to the query.

The returned data is formatted according to the `return_type` parameter, making it ready for further analysis.

Applying additional quality filters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can further refine the data retrieval by specifying additional quality filters. This customization allows filtering based on specific conditions for selected variables. The filters are added as keyword arguments in the form of field-value conditions.

Example with additional quality filters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In the following example, we define specific quality filters for the **sensitivity** and **surface_flag** fields:

.. code-block:: python

    import geopandas as gpd
    import gedidb as gdb

    # Instantiate the GEDIProvider
    provider = gdb.GEDIProvider(storage_type='local', 
                                local_path= "/path/to/your/database")


    # Load region of interest
    region_of_interest = gpd.read_file('./data/geojson/BR-Sa1.geojson')

    # Define the columns to query, additional parameters, and quality filters
    variables = ["wsci_z_pi_lower", "wsci_z_pi_upper"]
    quality_filters = {
    'sensitivity': '>= 0.95 and <= 1.0',
    'beam_type': "== 'full'"
    }

    gedi_data = provider.get_data(variables = variables,
                                  geometry = region_of_interest,
                                  start_time = "2018-01-01",
                                  end_time = "2024-12-31",
                                  return_type = 'xarray',
                                  **quality_filters)

Quality filters are passed as key-value pairs where the key is the variable name, and the value is the condition (e.g., `'sensitivity': '>= 0.95 and <= 1.0'`). This adds flexibility to refine the query based on specific criteria, improving the relevance of the retrieved data.

Supported output formats
------------------------

The :py:class:`gedidb.GEDIProvider` supports the following output formats, allowing you to choose the structure that best suits your analysis:

- :py:class:`xarray.Dataset`: Ideal for multi-dimensional data that includes labeled dimensions, suitable for advanced numerical and geospatial analysis.
- :py:class:`pandas.DataFrame`: Perfect for tabular data and smaller datasets, allowing for quick manipulation and export to CSV or other formats.

Below is an example of how the dataset looks in the :py:class:`xarray.Dataset` format:

.. code-block:: python

    <xarray.Dataset> Size: 291MB
    Dimensions:         (shot_number: 660802, profile_points: 101)
    Coordinates:
      * shot_number     (shot_number) uint64 5MB 84121100400504737 ... 8412110040...
      * profile_points  (profile_points) int64 808B 0 1 2 3 4 5 ... 96 97 98 99 100
        latitude        (shot_number) float64 5MB -1.044 -1.139 ... -14.85 -14.85
        longitude       (shot_number) float64 5MB -56.48 -56.38 ... -46.41 -46.41
        time            (shot_number) datetime64[ns] 5MB 2020-06-07 ... 2020-06-07
    Data variables:
        agbd            (shot_number) float32 3MB 143.8 45.86 50.03 ... 6.885 11.16
        rh              (shot_number, profile_points) float32 267MB -1.53 ... 8.85

The dataset includes multiple dimensions and variables:

- **Dimensions**: `shot_number` (unique ID for each shot) and `profile_points` (vertical profile points).
- **Coordinates**: Metadata such as  `time`, `latitude`, and `longitude`, describing each shot's spatial and temporal context.
- **Data Variables**: Core variables like `rh` (relative height) and `agbd` (Aboveground biomass density) for ecological analysis.

Below is an example of how the dataset looks in the :py:class:`pandas.DataFrame` format:

.. code-block:: python

                 latitude  longitude       time  ...  rh_99     rh_100     rh_101
    0       -1.044146 -56.475181 2020-06-07  ...  25.59  26.040001  26.570000
    1       -1.138822 -56.375156 2020-06-07  ...  15.30  15.680000  16.280001
    2       -1.138396 -56.375457 2020-06-07  ...  14.48  14.740000  15.080000
    3       -1.189413 -56.366139 2020-06-07  ...  16.48  16.809999  17.219999
    4       -1.188570 -56.366732 2020-06-07  ...   9.97  10.200000  10.500000
              ...        ...        ...  ...    ...        ...        ...
    660797 -14.849312 -46.408216 2020-06-07  ...   2.42   2.760000   3.580000
    660798 -14.848904 -46.408533 2020-06-07  ...   4.14   4.970000   6.650000
    660799 -14.848492 -46.408853 2020-06-07  ...   6.53   7.920000   9.790000
    660800 -14.847665 -46.409496 2020-06-07  ...   4.97   6.500000   8.740000
    660801 -14.848078 -46.409175 2020-06-07  ...   6.09   7.170000   8.850000

    [660802 rows x 106 columns]

---
