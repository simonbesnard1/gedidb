[project]
name = "gedidb"
version = "2.0.0"
description = "A toolbox to download, process, store and visualise Global Ecosystem Dynamics Investigation (GEDI) L2A-B and L4A-C data"
readme = "README.md"
authors = [
    { name = "Simon Besnard", email = "besnard@gfz-potsdam.de" },
    { name = "Felix Dombrowski", email = "felix@example.com" },
    { name = "Amelia Holcomb", email = "amelia@example.com" }
]
license = { file = "EUPL-1.2" }
keywords = ["geospatial", "GEDI", "database"]
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: EUROPEAN UNION PUBLIC LICENCE v.1.2 (EUPL-1.2)",
    "Operating System :: OS Independent"
]
requires-python = ">=3.12"
dependencies = [
    "pandas==2.2.2",
    "pyarrow==17.0.0",
    "geopandas==1.0.1",
    "SQLAlchemy==2.0.31",
    "GeoAlchemy2==0.15.2",
    "h5py==3.11.0",
    "numpy==2.0.1",
    "psycopg2==2.9.9",
    "xarray==2024.7.0",
    "Cartopy==0.23.0",
    "retry==0.9.2",
    "dask==2024.8.2",
    "distributed==2024.8.2"
]

[project.urls]
"Source Code" = "https://git.gfz-potsdam.de/global-land-monitoring/gedi-toolbox"

[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools>=42",
  "setuptools-scm>=7",
]

[tool.setuptools]
packages = ["gedidb"]

[tool.setuptools_scm]
fallback_version = "9999"

[tool.coverage.report]
exclude_lines = ["pragma: no cover", "if TYPE_CHECKING"]

[tool.mypy]
enable_error_code = ["ignore-without-code", "redundant-self", "redundant-expr"]
exclude = [
  'build'
]
files = "gedidb"
show_error_context = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true


[[tool.mypy.overrides]]
check_untyped_defs = true
packages = [
    "gedidb.core.gedidatabase",
    "gedidb.core.gedigranule",
    "gedidb.core.gedimetadata",
    "gedidb.core.gediprocessor",
    "gedidb.database",
    "gedidb.downloader",
    "gedidb.granule",
    "gedidb.metadata",
    "gedidb.providers",
    "gedidb.tests",
    "gedidb.utils"    
]

[[tool.mypy.overrides]]
check_untyped_defs = false
module = [
  "gedidb.tests.test_columns",
  "gedidb.tests.test_gedi_granules",
  "gedidb.tests.test_geospatial_tools",
  "gedidb.tests.test_granule_name",
  "gedidb.tests.test_nasa_cmr_api",
  "gedidb.tests.test_results",
  "gedidb.tests.test_write_db"
]

[[tool.mypy.overrides]]
# Start off with these
warn_unused_ignores = true

# Getting these passing should be easy
strict_concatenate = true
strict_equality = true

# Strongly recommend enabling this one as soon as you can
check_untyped_defs = true

# These shouldn't be too much additional work, but may be tricky to
# get passing if you use a lot of untyped libraries
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_decorators = true

# These next few are various gradations of forcing use of type annotations
disallow_incomplete_defs = true
disallow_untyped_calls = true
disallow_untyped_defs = true

# This one isn't too hard to get passing, but return on investment is lower
no_implicit_reexport = true

# This one can be tricky to get passing if you use a lot of untyped libraries
warn_return_any = true

[tool.ruff]
extend-exclude = [
  "doc",
  "_typed_ops.pyi",
]

[tool.ruff.lint]
# E402: module level import not at top of file
# E501: line too long - let black worry about that
# E731: do not assign a lambda expression, use a def
extend-safe-fixes = [
  "TID252", # absolute imports
]
extend-ignore = [
  "E402",
  "E501",
  "E731",
  "UP007",
]
extend-select = [
  "F", # Pyflakes
  "E", # Pycodestyle
  "W",
  "TID", # flake8-tidy-imports (absolute imports)
  "I", # isort
  "UP", # Pyupgrade
]

[tool.ruff.lint.per-file-ignores]
# don't enforce absolute imports
"asv_bench/**" = ["TID252"]

[tool.ruff.lint.isort]
known-first-party = ["gedidb"]

[tool.ruff.lint.flake8-tidy-imports]
# Disallow all relative imports.
ban-relative-imports = "all"

[tool.pytest.ini_options]
addopts = ["--strict-config", "--strict-markers"]

[tool.aliases]
test = "pytest"

[tool.repo-review]
ignore = [
  "PP308", # This option creates a large amount of log lines.
]
