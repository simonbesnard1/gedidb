stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

build-job:
  stage: build
  script:
    # Install conda (if not already installed on the runner)
    - wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
    - bash miniconda.sh -b -p $HOME/miniconda
    - source "$HOME/miniconda/etc/profile.d/conda.sh"
    - conda activate
    - conda config --set always_yes yes
    - conda env create -f ci/requirements/doc.yml  # Use your doc.yml to create the environment
    - conda activate gedidb-docs  # Activate the environment
    # Build the documentation
    - sphinx-build -b html doc/ doc/_build/html
  artifacts:
    paths:
      - doc/_build/html  # Store the build results as artifacts
    expire_in: 1 day     # Optional: Define how long to keep artifacts

setup-job:
  stage: build
  script:
    - python -m venv .venv
    - source .venv/bin/activate
    - pip install -e .
    - pip install geodatasets flake8 pyyaml tiledb flake8-junit-report
  artifacts:
    paths:
    - .venv/
    expire_in: 1 day

unit-test-job:
  stage: test
  dependencies:
    - setup-job
  script:
    - source .venv/bin/activate
    - pip install unittest-xml-reporting  # Install the library for XML reporting
    - echo "Running all tests in the 'tests/' folder and saving results as JUnit XML..."
    - python -m xmlrunner discover -s gedidb/tests -p "test_*.py" -o reports/
  artifacts:
    when: always
    reports:
      junit: gedidb/tests/reports/*.xml
    paths:
      - gedidb/tests/reports/*.xml


lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - source .venv/bin/activate
    - echo "Linting code..."
    - flake8 --output-file=flake8.log

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."

pages:  # this job must be called 'pages' to advise GitLab to upload content to GitLab Pages
  stage: deploy
  dependencies:
    - build-job  # Ensure that the pages job depends on the build-job
  script:
    # Create the public directory
    - rm -rf public
    - mkdir public
    - mkdir -p public/doc
    - mkdir -p public/doc/_static/

    # Copy over the docs
    - cp doc/index.html public/
    - cp -r doc/_build/html/* public/doc/

    # Check if everything is working
    - ls -al public
    - ls -al public/doc
  artifacts:
    paths:
      - public
    expire_in: 30 days
  only:
    - documentation
    - main
    - staging
