name: CI Pipeline

on:
  push:
    branches:
      - main
      - staging
      - documentation
  pull_request:
    branches:
      - main
      - staging
      - documentation

jobs:
  # ----------------------
  # 1. Documentation Build Job
  # ----------------------
  build-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Miniconda
        run: |
          wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
          bash miniconda.sh -b -p $HOME/miniconda
          source "$HOME/miniconda/etc/profile.d/conda.sh"
          conda config --set always_yes yes
          conda update -n base -c defaults conda
          conda clean --all --yes
          conda env update --file ci/requirements/doc.yml --name gedidb-docs || conda env create --file ci/requirements/doc.yml
          source $HOME/miniconda/bin/activate gedidb-docs
          python -c "import gedidb; print(gedidb.__version__)"
          sphinx-build -W -b html doc/ doc/_build/html

      - name: Upload Documentation Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: doc/_build/html

  # ----------------------
  # 2. Setup Job (Uses venv)
  # ----------------------
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Python Virtual Environment
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --no-cache-dir -e .
          pip install flake8 pytest-flake8 pytest-cov coverage
          python -c "import gedidb; print(gedidb.__version__)"

      - name: Upload Virtual Environment
        uses: actions/upload-artifact@v4
        with:
          name: python-env
          path: .venv

  # ----------------------
  # 3. Unit Test Job (Uses venv)
  # ----------------------
  test:
    runs-on: ubuntu-latest
    needs: setup  # Run only after setup completes
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Virtual Environment
        uses: actions/download-artifact@v4
        with:
          name: python-env
          path: .venv

      - name: Run Tests
        run: |
          source .venv/bin/activate
          pytest --cov=gedidb --cov-report html:htmlcov --cov-report=term --cov-report=xml:coverage.xml --junitxml=reports/junit.xml gedidb/tests

      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: htmlcov/

  # ----------------------
  # 4. Linting Job (Uses venv)
  # ----------------------
  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Virtual Environment
        uses: actions/download-artifact@v4
        with:
          name: python-env
          path: .venv

      - name: Run Flake8 Linting
        run: |
          source .venv/bin/activate
          flake8

  # ----------------------
  # 5. Deployment Job (Only Runs on Tags)
  # ----------------------
  deploy:
    runs-on: ubuntu-latest
    needs: [build-docs, test]  # Run only after docs and tests complete
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Documentation Artifacts
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: doc/_build/html

      - name: Download Coverage Reports
        uses: actions/download-artifact@v4
        with:
          name: coverage
          path: htmlcov/

      - name: Prepare Deployment Directory
        run: |
          rm -rf public
          mkdir -p public
          mkdir -p public/doc
          mkdir -p public/coverage
          cp -r doc/_build/html/* public/doc/
          cp -r htmlcov/* public/coverage/

      - name: Debug Files
        run: |
          ls -al public/
          ls -al public/doc
          ls -al public/coverage

      - name: Deploy (Placeholder)
        run: echo "Deployment script would go here"

      - name: Upload Deployment Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment
          path: public
